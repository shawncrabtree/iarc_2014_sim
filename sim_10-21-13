import numpy as np
import pygame
import math

#TODO keep track of score
#TODO deal with robots that go out of bounds

class Robot:
    def __init__(self, (x, y)):
        self.pos = np.array([float(x), float(y)])

        self.velocity = np.random.rand(2) - 0.5
        # TODO: robots always travel at 0.33 m/s
        # self.velocity = np.linalg.norm(self.velocity)

    def update(self, tick_length):
        self.pos += self.velocity * tick_length

class Copter (Robot):
    def pick_init_target(self, robots):
	#if robot is not headed toward green, then it is a possible target
	possible_targets = []
	for robot in robots:
	    if not is_toward_green(robot):
		possible_targets.append(robot)
	#if all good, then robot return to center
	if possible_targets == []:
            self.target = Robot((10,10))
	    return
	self.target = possible_targets[0]
	for robot in possible_targets:
	    #chose target closest to red line
	    if robot.pos[1] > self.target.pos[1]:
		if robot.velocity[1] > 0:
               	    self.target = robot

    def update(self, tick_length):
	#change velocity to be in direction of target, but have the same magnitude (speed)
	direction = [self.target.pos[0] - self.pos[0], self.target.pos[1] - self.pos[1]]
	dir_mag = math.sqrt(direction[0]**2 + direction[1]**2)
	self.velocity[0] = direction[0] / dir_mag
	self.velocity[1] = direction[1] / dir_mag
	#move
	self.pos += self.velocity * tick_length

    def pick_new_target(self, robots):
	if robots.count(frank.target) > 0:
 	    temp = frank.target
	    robots.remove(frank.target)
	    self.pick_init_target(robots)
	    robots.append(temp)

def m_to_px(meters):
    return int(round(meters * 20))

def is_toward_green(robot):
    if robot.velocity[1] > 0:
	return False
    # y=mx+b
    m = 0.0 - robot.velocity[1] / robot.velocity[0]
    b = 0.0 - robot.pos[1] - (m * robot.pos[0])
    x_intercept = 0.0 - b / m
    #if 0 < x-intercept < 20 then it is headed toward green
    if x_intercept > 0 and x_intercept < 20:
	return True
    return False

def draw_arena_boundary(screen, color, (sx, sy), (fx, fy)):
    width = fx - sx
    height = fy - sy
    pygame.draw.rect(screen, color, (sx, sy, width + 5, height + 5))

def draw_arena(screen):
    # Sidelines
    draw_arena_boundary(screen, (255, 255, 255), (0, 0), (0, m_to_px(20)))
    draw_arena_boundary(screen, (255, 255, 255), (m_to_px(20), 0), (m_to_px(20), m_to_px(20)))
    draw_arena_boundary(screen, (255, 255, 255), (0, m_to_px(10)), (m_to_px(20), m_to_px(10)))

    # Top goal line
    draw_arena_boundary(screen, (0, 255, 0), (0, 0), (m_to_px(20), 0))

    # Bottom goal line
    draw_arena_boundary(screen, (255, 0, 0), (0, m_to_px(20)), (m_to_px(20), m_to_px(20)))

def draw_robot(screen, color, (x, y)):
    pygame.draw.circle(screen, color, (x, y), m_to_px(0.33))

def turn_robot(robot):
    #TODO make robot turn 90, 180, or 270 depending on position and velocity
    #turns the robot 90 degrees
    temp = robot.velocity[0]
    robot.velocity[0] = robot.velocity[1]
    robot.velocity[1] = 0.0 - temp

def robot_is_hit(copter, robot):
    if(abs(copter.pos[0] - robot.pos[0]) < .1 and abs(copter.pos[1] - robot.pos[1]) < .1):
	return True
    else:
	 return False

pygame.init()
screen = pygame.display.set_mode((m_to_px(20) + 5, m_to_px(20) + 5))

robots = []
frank = Copter((2,2))
for x in range(9, 12):
    for y in range(9, 12):
        if x == 10 and y == 10:
            continue

        robots.append(Robot((x, y)))

frank.pick_init_target(robots)

clock = pygame.time.Clock()
while True:
    clock.tick(60)
    # TODO: blit background
    screen.fill((0, 0, 0))

    draw_arena(screen)

    for robot in robots:
        robot.update(1.0 / 60.0)

        px, py = m_to_px(robot.pos[0]), m_to_px(robot.pos[1])
        draw_robot(screen, (0, 0, 255), (px, py))
    
    #CHANGED FOR TESTING; SHOULD BE 1.0
    frank.update(2.0 / 60.0)
    draw_robot(screen, (255, 255, 255), (m_to_px(frank.pos[0]), m_to_px(frank.pos[1])))   
    
    if robot_is_hit(frank, frank.target):
	# while not is_toward_green(frank.target):
    	turn_robot(frank.target)
	frank.pick_new_target(robots)
	

    pygame.display.flip()
